// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	balancer "github.com/struckoff/sfcframework"

	mock "github.com/stretchr/testify/mock"

	nodes "github.com/struckoff/kvstore/router/nodes"
)

// Balancer is an autogenerated mock type for the Balancer type
type Balancer struct {
	mock.Mock
}

// AddData provides a mock function with given fields: cID, di
func (_m *Balancer) AddData(cID uint64, di balancer.DataItem) error {
	ret := _m.Called(cID, di)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, balancer.DataItem) error); ok {
		r0 = rf(cID, di)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNode provides a mock function with given fields: n
func (_m *Balancer) AddNode(n nodes.Node) error {
	ret := _m.Called(n)

	var r0 error
	if rf, ok := ret.Get(0).(func(nodes.Node) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNode provides a mock function with given fields: id
func (_m *Balancer) GetNode(id string) (nodes.Node, error) {
	ret := _m.Called(id)

	var r0 nodes.Node
	if rf, ok := ret.Get(0).(func(string) nodes.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodes.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocateData provides a mock function with given fields: di
func (_m *Balancer) LocateData(di balancer.DataItem) (nodes.Node, uint64, error) {
	ret := _m.Called(di)

	var r0 nodes.Node
	if rf, ok := ret.Get(0).(func(balancer.DataItem) nodes.Node); ok {
		r0 = rf(di)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodes.Node)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(balancer.DataItem) uint64); ok {
		r1 = rf(di)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(balancer.DataItem) error); ok {
		r2 = rf(di)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Nodes provides a mock function with given fields:
func (_m *Balancer) Nodes() ([]nodes.Node, error) {
	ret := _m.Called()

	var r0 []nodes.Node
	if rf, ok := ret.Get(0).(func() []nodes.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nodes.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Optimize provides a mock function with given fields:
func (_m *Balancer) Optimize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveData provides a mock function with given fields: di
func (_m *Balancer) RemoveData(di balancer.DataItem) error {
	ret := _m.Called(di)

	var r0 error
	if rf, ok := ret.Get(0).(func(balancer.DataItem) error); ok {
		r0 = rf(di)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNode provides a mock function with given fields: id
func (_m *Balancer) RemoveNode(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *Balancer) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNodes provides a mock function with given fields: ns
func (_m *Balancer) SetNodes(ns []nodes.Node) error {
	ret := _m.Called(ns)

	var r0 error
	if rf, ok := ret.Get(0).(func([]nodes.Node) error); ok {
		r0 = rf(ns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
