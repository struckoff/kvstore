// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	rpcapi "github.com/struckoff/kvstore/router/rpcapi"
)

// RPCBalancerClient is an autogenerated mock type for the RPCBalancerClient type
type RPCBalancerClient struct {
	mock.Mock
}

// RPCHeartbeat provides a mock function with given fields: ctx, in, opts
func (_m *RPCBalancerClient) RPCHeartbeat(ctx context.Context, in *rpcapi.Ping, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.Ping, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.Ping, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCRegister provides a mock function with given fields: ctx, in, opts
func (_m *RPCBalancerClient) RPCRegister(ctx context.Context, in *rpcapi.NodeMeta, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.NodeMeta, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.NodeMeta, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
