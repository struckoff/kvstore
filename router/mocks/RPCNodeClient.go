// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import rpcapi "github.com/struckoff/kvstore/router/rpcapi"

// RPCNodeClient is an autogenerated mock type for the RPCNodeClient type
type RPCNodeClient struct {
	mock.Mock
}

// RPCExplore provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCExplore(ctx context.Context, in *rpcapi.Empty, opts ...grpc.CallOption) (*rpcapi.ExploreRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.ExploreRes
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.Empty, ...grpc.CallOption) *rpcapi.ExploreRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.ExploreRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCMeta provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCMeta(ctx context.Context, in *rpcapi.Empty, opts ...grpc.CallOption) (*rpcapi.NodeMeta, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.NodeMeta
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.Empty, ...grpc.CallOption) *rpcapi.NodeMeta); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.NodeMeta)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCMove provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCMove(ctx context.Context, in *rpcapi.MoveReq, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.MoveReq, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.MoveReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCReceive provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCReceive(ctx context.Context, in *rpcapi.KeyReq, opts ...grpc.CallOption) (*rpcapi.KeyValues, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.KeyValues
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.KeyReq, ...grpc.CallOption) *rpcapi.KeyValues); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.KeyValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.KeyReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCRemove provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCRemove(ctx context.Context, in *rpcapi.KeyReq, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.KeyReq, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.KeyReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCStore provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCStore(ctx context.Context, in *rpcapi.KeyValue, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.KeyValue, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.KeyValue, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RPCStorePairs provides a mock function with given fields: ctx, in, opts
func (_m *RPCNodeClient) RPCStorePairs(ctx context.Context, in *rpcapi.KeyValues, opts ...grpc.CallOption) (*rpcapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpcapi.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *rpcapi.KeyValues, ...grpc.CallOption) *rpcapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpcapi.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpcapi.KeyValues, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
